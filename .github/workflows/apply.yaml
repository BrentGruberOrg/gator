name: Apply terraform

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  apply:
    name: Apply the gator terraform
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Check env var
        run: echo $TF_VAR_DO_DOMAIN
        
        # Replace the caddy server every time to force reconfigure
        # this is a stop gap until config is extracted from IaC
        # NOTE: splat replace currently not supported, https://github.com/hashicorp/terraform/issues/30350
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -replace=digitalocean_droplet.caddy[0]
        env:
          TF_VAR_DO_DOMAIN: ${{ secrets.TF_VAR_DO_DOMAIN }}
          TF_VAR_DO_TOKEN: ${{ secrets.TF_VAR_DO_TOKEN }}
          TF_VAR_TAILSCALE_TOKEN: ${{ secrets.TF_VAR_TAILSCALE_TOKEN }}
          TF_VAR_GCLOUD_TOKEN: ${{ secrets.TF_VAR_GCLOUD_TOKEN }}
          TF_VAR_GCLOUD_PASSWORD: ${{ secrets.TF_VAR_GCLOUD_PASSWORD }}
          TF_VAR_GCLOUD_METRICS_USER: ${{ secrets.TF_VAR_GCLOUD_METRICS_USER }}
          TF_VAR_GCLOUD_LOGS_USER: ${{ secrets.TF_VAR_GCLOUD_LOGS_USER }}
          TF_VAR_GCLOUD_TRACES_USER: ${{ secrets.TF_VAR_GCLOUD_TRACES_USER }}
          TF_VAR_GAGENT_PROFILE: ${{ secrets.TF_VAR_GAGENT_PROFILE }}

      - name: Terraform output
        run: terraform output

  tag:
    name: Tag the new server in mist
    runs-on: ubuntu-20.04
    needs: [apply]

    steps:
      # Since the caddy server was just created, need to wait for access to mist
      - name: Wait for endpoint
        uses: nev7n/wait_for_response@v1
        with:
          url: 'https://mist.brentgruber.com'
          responseCode: 200
          timeout: 300000 # 5 mins
          interval: 200

      # Get clouds
      - name: Get Machine List
        run: |
          curl --header 'Authorization: ${{ secrets.MIST_TOKEN}}' https://mist.brentgruber.com/api/v2/machines

      
